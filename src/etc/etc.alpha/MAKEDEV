#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.alpha/MAKEDEV.md,v 1.11 2002/04/10 06:09:43 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.42 2002/03/31 21:49:12 fgsch Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
#
#	$OpenBSD: MAKEDEV,v 1.84 2002/04/10 06:10:05 deraadt Exp $
#
# Copyright (c) 2001,2002 Todd T. Fries <todd@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	devices to be put on ramdisk-based media
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
# Disks:
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	rd*	"rd" pseudo-disks
#	raid*	RAIDframe disk devices
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
# Terminal ports:
#	ttyB?	DEC 3000 ZS8530 ("scc") serial ports
#	ttyC0	wscons screen 0
#	ttyC-F*	wscons virtual consoles
#	wskbd*	wscons keyboards
#	wsmux	wscons keyboard/mouse mux devices
#	tty0*	NS16x50 serial ports
#	ttyc*	Cyclades serial ports
# Pointing devices:
#	wsmouse*	wscons mice
# Pseudo terminals:
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
# Printers:
#	lpt*	IEEE 1284 centronics printer
#	lpa*	interruptless lp
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic device
#	utty*	Serial ports
# Special purpose devices:
#	ch*	SCSI media changer
#	pf*	Packet Filter
#	bpf*	Berkeley Packet Filter
#	altq/	ALTQ control interface
#	iop*	I2O controller device
#	pci	PCI bus device
#	usbs	make USB devices
#	fd	makes fd/* for the fdescfs
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	mmclock	memory mapped clock
#	kbd	keyboard (provides events, for X11)
#	mouse	mouse (provides events, for X11)
#	*random	inkernel random data source
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
#	xfs*	XFS filesystem devices
#	audio*	audio device
#	speaker	pc speaker
#	rmidi*	raw midi devices
#	music*	midi devices
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

trunc()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std fd0 wd0 wd1 wd2 sd0 sd1 sd2
	R st0 cd0 ttyC0 random rd0
	;;

std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 10 0
	M stdout	c 10 1
	M stderr	c 10 2
	M ksyms		c 39 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	;;

ttyB*|ttyc*)
	U=${i##tty?}
	case $i in
	ttyB*)	type=B major=15 minor=$(($U*2));;
	ttyc*)	type=c major=38 minor=$U;;
	esac
	M tty$type$U c $major $minor 660 dialer uucp
	M cua$type$U c $major $(($minor+128)) 660 dialer uucp
	;;

mmclock)
	M mmclock c 28 0 444
	;;

music*)
	M music$U     c 42 $U
	M sequencer$U c 42 $(($U+128))
	MKlist="$MKlist;[ -e music ] || ln -s music$U music"
	MKlist="$MKlist;[ -e sequencer ] || ln -s sequencer$U sequencer"
	;;

rmidi*)
	M rmidi$U c 41 $U 666
	;;

speaker)
	M speaker c 40 0 600
	;;

audio*)
	M sound$U	c 24 $U
	M mixer$U	c 24 $(($U+16))
	M audio$U	c 24 $(($U+128))
	M audioctl$U	c 24 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

ss*)
	M ss$U c 32 $(($U*16)) 640 operator
	M nss$U c 32 $(($(($U*16))+1)) 640 operator
	M enss$U c 32 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

uk*)
	M uk$U c 33 $U 640 operator
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 34 $n 644
		n=$(($n+1))
	done
	;;

kbd)
	M kbd c major_kbd_c 0 600 
	;;

tun*)
	M tun$U c 7 $U 600
	;;

lkm)
	M lkm c 16 0 640 kmem
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 10 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

usbs)
	R utty0 utty1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R usb0 usb1
	;;

pci)
	M pci c 52 0 664
	;;

iop*)
	M iop$U c 54 $U 660
	;;

altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c 53 $U 644
		U=$(($U+1))
	done
	;;

bpf*)
	M bpf$U c 11 $U 600
	;;

pf*)
	M pf c 35 0 600
	;;

ch*)
	M ch$U c 14 $U 660 operator
	;;

utty*)
	M utty$U c 49 $U 660
	;;

ugen*)
	n=$(($U*16))
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		M ugen$U.$j c 48 $(($n+$j)) 660
	done
	;;

ulpt*)
	M ulpt$U c 47 $U 660
	;;

uhid*)
	M uhid$U c 46 $U 660
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 45 $U 660
	;;

lpt*|lpa*)
	case $i in
	lpt*) n=lpt f=0;;
	lpa*) n=lpa f=128;;
	esac
	M $n$U c 31 $(($U+$f)) 600
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

wsmouse*)
	M wsmouse$U c 30 $U 600
	;;

tty0*)
	M tty$U c 26 $U 660 dialer uucp
	M cua$U c 26 $(($U+128)) 660 dialer uucp
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 56 0 600
	M wskbd c 56 1 600
	;;

wskbd*)
	M wskbd$U c 29 $U 600
	;;

tty[C-F]*)
	U=${i##tty[C-F]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 25 $(( 16#$U + $m )) 600;;
	cfg) M tty${n}cfg c 25 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wskbd0 wskbd1 wskbd2
	R wskbd3 wsmux ttyCcfg ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5
	R ttyC6 ttyC7 ttyC8 ttyC9 ttyCa ttyCb
	;;

fd*)
	typnam=$U${i#fd[01]*}
	case $typnam in
	0|1)	typnum=0;; # no type specified, assume A
	*A)	typnum=0; typnam=0;;
	*B)	typnum=1;;
	*C)	typnum=2;;
	*D)	typnum=3;;
	*E)	typnum=4;;
	*F)	typnum=5;;
	*G)	typnum=6;;
	*H)	typnum=7;;
	*)	echo bad type $typnam for $i; exit 1;;
	esac
	case $U in
	0|1)	blk=4; chr=37;;
	*)	echo bad unit $U for $i; exit 1;;
	esac
	nam=fd${typnam}
	n=$(($(($U*128))+$(($typnum*16))))
	M ${nam}a	b $blk $n 640 operator
	M ${nam}b	b $blk $(($n+1)) 640 operator
	M ${nam}c	b $blk $(($n+2)) 640 operator
	M r${nam}a	c $chr $n 640 operator
	M r${nam}b	c $chr $(($n+1)) 640 operator
	M r${nam}c	c $chr $(($n+2)) 640 operator
	;;

rd*)
	dodisk2 rd $U 6 28 $U 0
	;;

vnd*)
	dodisk vnd $U 9 9 $U 0
	dodisk svnd $U 9 9 $U 128
	;;

cd*)
	dodisk2 cd $U 3 13 $U 0
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 2 $n 660 operator
		M ${pre}rst$U	c 12 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 fd1 fd1B fd1C fd1D
	R fd1E fd1F fd1G fd1H fd0 fd0B fd0C fd0D fd0E fd0F fd0G fd0H
	R xfs0 ss0 ss1 ch0 wscons pci iop0 iop1 usbs rmidi0 rmidi1
	R rmidi2 rmidi3 rmidi4 rmidi5 rmidi6 rmidi7 music0 speaker
	R audio0 uk0 random lpa0 lpa1 lpa2 lpt0 lpt1 lpt2 mmclock lkm
	R tty00 tty01 tty02 tty03 ttyc0 ttyc1 ttyc2 ttyc3 ttyc4 ttyc5
	R ttyc6 ttyc7 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 ttyB5 pf altq wd0
	R wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
	;;

wd*|sd*|raid*|ccd*)
	case $i in
	wd*) dodisk wd $U 0 36 $U 0;;
	sd*) dodisk sd $U 8 8 $U 0;;
	raid*) dodisk raid $U 16 43 $U 0;;
	ccd*) dodisk ccd $U 7 27 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
