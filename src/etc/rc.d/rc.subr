#	$OpenBSD: rc.subr,v 1.64 2012/09/01 07:08:37 ajacoutot Exp $
#
# Copyright (c) 2010, 2011 Antoine Jacoutot <ajacoutot@openbsd.org>
# Copyright (c) 2010, 2011 Ingo Schwarze <schwarze@openbsd.org>
# Copyright (c) 2010, 2011 Robert Nagy <robert@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


# Default functions and variables used by rc.d(8) scripts.

rc_err() {
	echo $1 1>&2
	exit 1
}

rc_usage() {
	rc_err "usage: $0 [-df] {start|check|reload|restart|stop}"
}

rc_write_runfile() {
	[ -d ${_RC_RUNDIR} ] || mkdir -p ${_RC_RUNDIR} && \
		print -rn -- "${pexp}" > ${_RC_RUNFILE}
}

rc_read_runfile() {
	local _new_pexp
	[ -f ${_RC_RUNFILE} ] && _new_pexp=$(< ${_RC_RUNFILE})
	[ -n "${_new_pexp}" ] && pexp="${_new_pexp}"
}

rc_rm_runfile() {
	[ -f ${_RC_RUNFILE} ] && rm -f ${_RC_RUNFILE}
}

rc_start() {
	${rcexec} "${daemon} ${daemon_flags} ${_bg}"
}

rc_check() {
	pgrep -q -f "^${pexp}"
}

rc_reload() {
	pkill -HUP -f "^${pexp}"
}

rc_stop() {
	pkill -f "^${pexp}"
}

rc_do() {
	if [ -n "${_RC_DEBUG}" ]; then
		echo "doing $@" && "$@"
	else
		"$@" >/dev/null 2>&1
	fi
}

rc_exit() {
	local _pfix
	[ -z "${INRC}" -o X"$1" != X"ok" ] && _pfix="($1)"
	echo ${INRC:+'-n'} "${_pfix}"
	[ X"$1" = X"ok" ] && exit 0 || exit 1
}

rc_wait() {
	local _i=0 _w=${2:-30}
	while [ $_i -lt $_w ]; do
		case "$1" in
			reload|start)
				rc_do rc_check && return 0
				;;
			stop)
				rc_do rc_check || return 0
				;;
			*)
				break
				;;
		esac
		sleep 1
		_i=$((_i+1))
	done
	return 1
}

rc_cmd() {
	local _bg _enotsup _n

	[ "$(id -u)" -eq 0 ] || \
		[ X"${rc_usercheck}" != X"NO" -a X"$1" = "Xcheck" ] || \
		rc_err "$0: need root privileges"

	eval _enotsup=\${rc_${1}}
	[ X"${_enotsup}" != X"NO" ] || rc_err "$0: $1 is not supported"

	[ X"${rc_bg}" = X"YES" ] && _bg="&"
	[ -n "${_RC_DEBUG}" ] || _n="-n"

	rc_do rc_read_runfile

	case "$1" in
	check)
		rc_do rc_check
		;;
	start)
		if [ X"${daemon_flags}" = X"NO" ]; then
			rc_err "$0: no $1 without -f, ${_name}_flags=NO"
			exit 1
		fi
		[ -z "${INRC}" ] && rc_do rc_check && exit 0
		echo $_n "${INRC:+ }${_name}"
		while true; do  # no real loop, only needed to break
			if type rc_pre >/dev/null; then
				rc_do rc_pre || break
			fi
			# XXX only checks the status of the return code,
			# and _not_ that the daemon is actually running
			rc_do rc_start || break
			if [ -n "${_bg}" ]; then
				sleep 1
				rc_do rc_wait start || break
			fi
			rc_do rc_write_runfile
			rc_exit ok
		done
		# handle failure
		type rc_post >/dev/null && rc_do rc_post
		rc_do rc_rm_runfile
		rc_exit failed
		;;
	stop)
		rc_do rc_check || exit 0
		echo $_n "${INRC:+ }${_name}"
		rc_do rc_stop || rc_exit failed
		rc_do rc_wait stop || rc_exit failed
		if type rc_post >/dev/null; then \
			rc_do rc_post || rc_exit failed
		fi
		rc_do rc_rm_runfile
		rc_exit ok
		;;
	reload)
		rc_do rc_check || exit 0
		echo $_n "${INRC:+ }${_name}"
		rc_do rc_reload || rc_exit failed
		rc_do rc_wait reload || rc_exit failed
		rc_exit ok
		;;
	restart)
		/etc/rc.d/${_name} ${_RC_DEBUG} ${_RC_FORCE} stop &&
			/etc/rc.d/${_name} ${_RC_DEBUG} ${_RC_FORCE} start
		;;
	*)
		rc_usage
		;;
	esac
}

[ -z "${local_rcconf}" ] && . /etc/rc.conf

[ -n "${daemon}" ] || rc_err "$0: daemon is not set"

unset _RC_DEBUG _RC_FORCE
while getopts "df" c; do
	case "$c" in
		d) _RC_DEBUG=-d;;
		f) _RC_FORCE=-f;;
		*) rc_usage;;
	esac
done
shift $((OPTIND-1))

_name=$(basename $0)
_RC_RUNDIR=/var/run/rc.d
_RC_RUNFILE=${_RC_RUNDIR}/${_name}

eval _rcflags=\${${_name}_flags}
eval _rcuser=\${${_name}_user}

getcap -f /etc/login.conf ${_name} 1>/dev/null 2>&1 && \
	daemon_class=${_name}

[ -z "${daemon_class}" ] && daemon_class=daemon
[ -z "${daemon_user}"  ] && daemon_user=root

[ -n "${_RC_FORCE}" ] && [ X"${_rcflags}" = X"NO" ] && unset _rcflags
[ -n "${_rcflags}" ] && daemon_flags=${_rcflags}
[ -n "${_rcuser}"  ] && daemon_user=${_rcuser}

# sanitize
daemon_flags=$(printf ' %s' ${daemon_flags})
daemon_flags=${daemon_flags## }
readonly daemon_class
unset _rcflags _rcuser

pexp="${daemon}${daemon_flags:+ ${daemon_flags}}"
rcexec="su -l -c ${daemon_class} -s /bin/sh ${daemon_user} -c"
