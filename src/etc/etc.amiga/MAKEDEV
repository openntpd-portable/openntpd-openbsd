#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.8 2002/05/16 21:11:20 miod Exp 
#	OpenBSD: MAKEDEV.mi,v 1.46 2002/05/16 16:18:44 provos Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
#
#	$OpenBSD: MAKEDEV,v 1.65 2002/05/16 21:12:21 miod Exp $
#
# Copyright (c) 2001,2002 Todd T. Fries <todd@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
# Disks:
#	ramdisk	devices needed for install floppies
#	sd*	SCSI disks
#	rd*	"rd" pseudo-disks
#	ccd*	concatenated disk devices
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
# Console ports:
#	ttye*	ite bitmapped consoles
# Pointing devices:
#	mouse*	Amiga mice
# Terminal ports:
#	tty0*	NS16x50 serial ports
#	ttyA*	mfc serial ports
#	ttyB*	ISA COM ports
# Pseudo terminals:
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
# Printers:
#	par*	motherboard parallel port
#	lpt*	IEEE 1284 centronics printer
#	lpa*	interruptless lp
# Special purpose devices:
#	grf*	Motherboard bitmapped video.
#	kbd	keyboard (provides events, for X11)
#	joy*	joystick driver
#	kbd	Amiga keyboard
#	view*	generic interface to graphic displays
#	aconf	autoconfig information (not yet)
#	lkm	loadable kernel modules interface
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	pf*	Packet Filter
#	ss*	SCSI scanners
#	uk*	SCSI Unknown device
#	*random	inkernel random data source
#	audio*	audio device
#	xfs*	XFS filesystem devices
#	ch*	SCSI media changer
#	altq/	ALTQ control interface
#	fd	makes fd/* for the fdescfs
#	systrace*	system call tracing device
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

trunc()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std kbd pty0 tty00 ttyA0 ttyA1 ttyB0 ttyB1
	R ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	R cd0 cd1 sd0 sd1 sd2 sd3 st0 st1
	R fd0 fd1 wd0 wd1 rd0 random
	;;

std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 21 0
	M stdout	c 21 1
	M stderr	c 21 2
	M ksyms		c 42 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	M reload	c 2 20 600
	;;

ttyA[01])
	M ttyA$U c 17 $U 660 dialer uucp
	M ttyM$U c 17 $(($U+128)) 660 dialer uucp
	;;

par*)
	case $U in
	0)
		M par$U c 11 $U 600
		;;
	*)
		echo bad unit for par in: $i
		;;
	esac
	;;

ttye*)
	case $U in
	0|1|2|3|4|5|6)
		M ttye$U c 13 $U 600
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

grf*)
	case $U in
	0|1|2|3|4|5|6)
		M grf$U c 10 $U
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
# for those that need it, also make overlay and image devices:
	case $U in
	4)
		M grfov$U c 10 $(($U+16)) 600
		M grfim$U c 10 $(($U+32)) 600
		;;
	esac
	;;

mouse*)
	case $U in
	0|1)
		M mouse$U c 15 $U
		if [ $U = 0 ]
		then 
			MKlist="$MKlist;rm -f mouse; ln -s mouse$U mouse"
		fi
		;;
	*)
		echo bad unit for mouse in: $i
		;;
	esac
	;;

view*)
	case $U in
	00|01|02|03|04|05|06|07|08|09)
		M view$U c 16 $U
		;;
	*)
		echo bad unit for view in: $i
		;;
	esac
	;;

ttyB*)
	M ttyB$U c 32 $U 660 dialer uucp
	M cuaB$U c 32 $(($U+128)) 660 dialer uucp
	;;

systrace)
	M systrace c 50 0 644
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 21 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c 52 $U 644
		U=$(($U+1))
	done
	;;

ch*)
	M ch$U c 40 $U 660 operator
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

audio*)
	M sound$U	c 39 $U
	M mixer$U	c 39 $(($U+16))
	M audio$U	c 39 $(($U+128))
	M audioctl$U	c 39 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 35 $n 644
		n=$(($n+1))
	done
	;;

uk*)
	M uk$U c 36 $U 640 operator
	;;

ss*)
	M ss$U c 25 $(($U*16)) 640 operator
	M nss$U c 25 $(($(($U*16))+1)) 640 operator
	M enss$U c 25 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

pf*)
	M pf c 34 0 600
	;;

tun*)
	M tun$U c 23 $U 600
	;;

bpf*)
	M bpf$U c 22 $U 600
	;;

lkm)
	M lkm c 24 0 640 kmem
	;;

joy*)
	M joy$U c 43 $U 666
	;;

kbd)
	M kbd c 14 0 600 
	;;

lpt*|lpa*)
	case $i in
	lpt*) n=lpt f=0;;
	lpa*) n=lpa f=128;;
	esac
	M $n$U c 33 $(($U+$f)) 600
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

tty0*)
	M tty$U c 12 $U 660 dialer uucp
	M cua$U c 12 $(($U+128)) 660 dialer uucp
	;;

vnd*)
	dodisk vnd $U 6 19 $U 0
	dodisk svnd $U 6 19 $U 128
	;;

cd*)
	dodisk2 cd $U 7 9 $U 0 8
	;;

rd*)
	dodisk2 rd $U 16 41 $U 0
	;;

fd*)
	case $U in 0|1|2|3)
	M fd${U}a b 2 $(($U*16)) 640 operator
	M fd${U}b b 2 $(($(($U*16))+1)) 640 operator
	M rfd${U}a c 18 $(($U*16)) 640 operator
	M rfd${U}b c 18 $(($(($U*16))+1)) 640 operator;;
	*) echo bad unit for floppy disk in: $i;;
	esac
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 5 $n 660 operator
		M ${pre}rst$U	c 20 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R sd5 sd6 sd7 sd8 sd9 cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0
	R bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2
	R xfs0 ss0 ss1 ch0 local kbd mouse0 mouse1 par0 grf0 grf1 grf2
	R grf3 grf4 grf5 grf6 audio0 uk0 random joy0 joy1 lpa0 lpa1
	R lpa2 lpt0 lpt1 lpt2 lkm ttye0 ttye1 ttye2 ttye3 ttye4 ttye5
	R ttye6 tty00 tty01 tty02 tty03 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4
	R ttyA0 ttyA1 pf altq systrace fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3
	R std st0 st1 fd
	;;

wd*|sd*|ccd*)
	case $i in
	wd*) dodisk wd $U 0 37 $U 0;;
	sd*) dodisk sd $U 4 8 $U 0;;
	ccd*) dodisk ccd $U 8 7 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
