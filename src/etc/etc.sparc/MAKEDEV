#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.sparc/MAKEDEV.md,v 1.43 2010/07/03 03:59:15 krw Exp 
#	OpenBSD: MAKEDEV.common,v 1.48 2010/06/14 14:07:49 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.79 2009/01/25 17:30:48 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.14 2005/02/07 06:14:18 david Exp 
#
#
# Copyright (c) 2001-2004 Todd T. Fries <todd@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	Ramdisk kernel devices
#	std	Standard devices
#	local	Configuration specific devices
# Disks:
#	ccd*	Concatenated disk devices
#	cd*	ATAPI and SCSI CD-ROM drives
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	presto*	Prestoserve NVRAM memory
#	sd*	SCSI disks, including flopticals
#	raid*	RAIDframe disk devices
#	rd*	"rd" pseudo-disks
#	vnd*	"file" pseudo-disk devices
#	xd*	Xylogic 753/7053 disks
#	xy*	Xylogic 450/451 disks
# Tapes:
#	ch*	SCSI media changers
#	st*	SCSI tape drives
# Terminal ports:
#	cua[a-z]*	Zilog 8530 serial ports
#	tty[a-z]*	Zilog 8530 serial ports
#	tty[0-7][0-9a-f]	NS16x50 serial ports
#	magma*	Magma multiport cards
#	spif*	"spif" multiport cards
# Pseudo terminals:
#	ptm	pty master device
#	pty*	Set of 62 master pseudo terminals
#	tty*	Set of 62 slave pseudo terminals
# Printers:
#	bpp*	Parallel port
#	bppmag[mno]	Magma parallel port
#	bpp[jkl]	"spif" parallel port
# Console ports:
#	wscons	Minimal wscons devices
#	ttyC-J*	wscons display devices
#	wskbd*	wscons keyboards
#	wsmux	wscons keyboard/mouse mux devices
# Pointing devices:
#	wsmouse*	wscons mice
# Special purpose devices:
#	apm	Power management device
#	audio*	Audio devices
#	bio	ioctl tunnel pseudo-device
#	bpf*	Berkeley Packet Filter
#	fd	fd/* nodes
#	lkm	Loadable kernel modules interface
#	openprom	PROM settings
#	pf*	Packet Filter
#	*random	In-kernel random data source
#	systrace*	System call tracing device
#	tun*	Network tunnel driver
#	uk*	Unknown SCSI devices
#	nnpfs*	NNPFS filesystem node
#	vscsi*	Virtual SCSI controller
#	diskmap	Disk mapper
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

alph2d()
{
	local t="$1"
	local p="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local sub=${p%${t}*}
	echo ${#sub}
}

h2d()
{
	local s="$1"
	local f=${s%*[0-9a-f]} n=${s#[0-9a-f]*}

	echo $(($(_h2d $f)*16+ $(_h2d $n) ))
}

_h2d()
{
	case $1 in
	[0-9]) echo -n $1;;
	a) echo -n 10;;
	b) echo -n 11;;
	c) echo -n 12;;
	d) echo -n 13;;
	e) echo -n 14;;
	f) echo -n 15;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640 operator
		M r$1$2$d	c $4 $(($n+$count)) 640 operator
		let count=count+1
	done
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist[0]="rm -f"

mkl() {
	mklist[${#mklist[*]}]=";mknod -m $1 $2 $3 $4 $5"
}

M() {
	RMlist[${#RMlist[*]}]=$1
	mkl ${5-666} $1 $2 $3 $4
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist[${#MKlist[*]}]=";chown $7:$G $1"
	} || {
		case $G in
		wheel)
			[ ${#whlist[*]} = 0 ] && whlist[0]=";chgrp wheel"
			whlist[${#whlist[*]}]="$1"
		;;
		operator)
			[ ${#oplist[*]} = 0 ] && oplist[0]=";chgrp operator"
			oplist[${#oplist[*]}]="$1"
		;;
		*)
			MKlist[${#MKlist[*]}]=";chgrp $G $1";
		esac
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std bpf0 bio diskmap
	R fd0 sd0 sd1 sd2 rd0 cd0
	;;

std)
	M console	c 0 0 600
	M tty		c 2 0
	M mem		c 3 0 640 kmem
	M kmem		c 3 1 640 kmem
	M null		c 3 2
	M zero		c 3 12
	M stdin		c 24 0
	M stdout	c 24 1
	M stderr	c 24 2
	M ksyms		c 122 0 640 kmem
	M klog		c 16 0 600
	M eeprom	c 3 11	640 kmem
	M openprom	c 70 0	640 kmem
	;;

diskmap)
	M diskmap c 129 0 640 operator
	;;

vscsi*)
	M vscsi$U c 128 $U 600
	;;

nnpfs*)
	M nnpfs$U c 51 $U 600
	;;

uk*)
	M uk$U c 120 $U 640 operator
	;;

tun*)
	M tun$U c 111 $U 600
	;;

systrace)
	M systrace c 50 0 644
	;;

*random)
	n=0
	for pre in " " s u a
	do
		M ${pre}random c 119 $n 644
		n=$(($n+1))
	done
	;;

pf*)
	M pf c 59 0 600
	;;

openprom)
	M openprom c 70 0  
	;;

lkm)
	M lkm c 112 0 640 _lkm
	;;

fd)
	RMlist[${#RMlist[*]}]=";mkdir -p fd;rm -f" n=0
	while [ $n -lt 64 ];do M fd/$n c 24 $n;n=$(($n+1));done
	MKlist[${#MKlist[*]}]=";chmod 555 fd"
	;;

bpf*)
	M bpf$U c 105 $U 600
	;;

bio)
	M bio c 124 0 600
	;;

audio*)
	M sound$U	c 69 $U
	M mixer$U	c 69 $(($U+16))
	M audio$U	c 69 $(($U+128))
	M audioctl$U	c 69 $(($U+192))
	MKlist[${#MKlist[*]}]=";[ -e audio ] || ln -s audio$U audio"
	MKlist[${#MKlist[*]}]=";[ -e mixer ] || ln -s mixer$U mixer"
	MKlist[${#MKlist[*]}]=";[ -e sound ] || ln -s sound$U sound"
	MKlist[${#MKlist[*]}]=";[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

apm*)
	M apm	c 30 0 644
	M apmctl	c 30 8 644
	;;

wsmouse[0-9]*)
	M wsmouse$U c 80 $U 600
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 81 0 600
	M wskbd c 81 1 600
	;;

wskbd[0-9]*)
	M wskbd$U c 79 $U 600
	;;

tty[C-J]*)
	U=${i##tty[C-J]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	ttyG*) n=G m=1024;;
	ttyH*) n=H m=1280;;
	ttyI*) n=I m=1536;;
	ttyJ*) n=J m=1792;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 78 $((16#$U+$m)) 600;;
	cfg) M tty${n}cfg c 78 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wskbd0 wskbd1 wskbd2
	R wskbd3 wsmux ttyIcfg ttyI0 ttyI1 ttyI2 ttyI3 ttyI4 ttyI5
	R ttyI6 ttyI7 ttyI8 ttyI9 ttyIa ttyIb ttyHcfg ttyH0 ttyH1
	R ttyH2 ttyH3 ttyH4 ttyH5 ttyH6 ttyH7 ttyH8 ttyH9 ttyHa ttyHb
	R ttyGcfg ttyG0 ttyG1 ttyG2 ttyG3 ttyG4 ttyG5 ttyG6 ttyG7
	R ttyG8 ttyG9 ttyGa ttyGb ttyFcfg ttyF0 ttyF1 ttyF2 ttyF3
	R ttyF4 ttyF5 ttyF6 ttyF7 ttyF8 ttyF9 ttyFa ttyFb ttyEcfg
	R ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7 ttyE8 ttyE9
	R ttyEa ttyEb ttyDcfg ttyD0 ttyD1 ttyD2 ttyD3 ttyD4 ttyD5
	R ttyD6 ttyD7 ttyD8 ttyD9 ttyDa ttyDb ttyCcfg ttyC0 ttyC1
	R ttyC2 ttyC3 ttyC4 ttyC5 ttyC6 ttyC7 ttyC8 ttyC9 ttyCa ttyCb
	;;

bpp*)
	M bpp$U c 104 $U 600
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A letters p q r s t u v w x y z P Q R S T
	set -A suffixes 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q \
	    r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X \
	    Y Z

	name=${letters[$U]}
	n=0
	while [ $n -lt 62 ]
	do
		nam=$name${suffixes[$n]}
		off=$(($U*62))
		M tty$nam c 20 $(($off+$n))
		M pty$nam c 21 $(($off+$n))
		n=$(($n+1))
	done
	;;

ptm)
	M ptm c 125 0 666
	;;

spif*)
	case $U in
	0)	offset=0  nam=j;;
	1)	offset=16 nam=k;;
	2)	offset=32 nam=l;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 8 ]
	do
		name=${nam}`hex $n`
		M tty$name c 102 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 103 $(($offset+0)) 600
	;;

magma*)
	case $U in
	0)	offset=0  nam=m;;
	1)	offset=16 nam=n;;
	2)	offset=32 nam=o;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 16 ]
	do
		name=${nam}`hex $n`
		M tty$name c 100 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 101 $(($offset+0)) 600
	M bpp${nam}1 c 101 $(($offset+1)) 600
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 36 $o 660 dialer uucp
	M cua$U c 36 $(($o+128)) 660 dialer uucp
	;;

tty[a-z])
	u=${i#tty*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=2 ;;
	d) n=3 ;;
	e) n=4;;
	f) n=5;;
	*) echo unknown tty device $i ;;
	esac
	M tty$u c 12 $n 660 dialer uucp
	;;

cua[a-z])
	u=${i#cua*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=2 ;;
	d) n=3 ;;
	e) n=4;;
	f) n=5;;
	*) echo unknown cua device $i ;;
	esac
	M cua$u c 12 $(($n+128)) 660 dialer uucp
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 11 $n 660 operator
		M ${pre}rst$U	c 18 $n 660 operator
		n=$(($n+1))
	done
	;;

ch*)
	M ch$U c 19 $U 660 operator
	;;

vnd*)
	dodisk vnd $U 8 110 $U 0
	dodisk svnd $U 8 110 $U 2048
	;;

rd*)
	dodisk2 rd $U 17 106 $U 0
	;;

fd*)
	typnam=$U${i#fd[01]*}
	case $typnam in
	0|1)	typnum=0;; # no type specified, assume A
	*A)	typnum=0; typnam=0;;
	*B)	typnum=1;;
	*C)	typnum=2;;
	*D)	typnum=3;;
	*E)	typnum=4;;
	*F)	typnum=5;;
	*G)	typnum=6;;
	*H)	typnum=7;;
	*)	echo bad type $typnam for $i; exit 1;;
	esac
	case $U in
	0|1)	blk=16; chr=54;;
	*)	echo bad unit $U for $i; exit 1;;
	esac
	nam=fd${typnam}
	n=$(($(($U*128))+$(($typnum*16))))
	M ${nam}a	b $blk $n 640 operator
	M ${nam}b	b $blk $(($n+1)) 640 operator
	M ${nam}c	b $blk $(($n+2)) 640 operator
	M ${nam}i	b $blk $(($n+8)) 640 operator
	M r${nam}a	c $chr $n 640 operator
	M r${nam}b	c $chr $(($n+1)) 640 operator
	M r${nam}c	c $chr $(($n+2)) 640 operator
	M r${nam}i	c $chr $(($n+8)) 640 operator
	;;

cd*)
	dodisk2 cd $U 18 58 $U 0
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R presto0 bpp0 ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0
	R sd1 sd2 sd3 sd4 cd0 cd1 rd0 xy0 xy1 xy2 xy3 tun0 tun1 tun2
	R tun3 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0
	R fd1 fd1B fd1C fd1D fd1E fd1F fd1G fd1H fd0 fd0B fd0C fd0D
	R fd0E fd0F fd0G fd0H diskmap vscsi0 nnpfs0 ch0 bio cuaa cuab
	R cuac cuad ttya ttyb ttyc ttyd ptm local wscons audio0 audio1
	R audio2 uk0 random lkm tty00 tty01 tty02 tty03 apm pf
	R systrace xd0 xd1 xd2 xd3 raid0 raid1 raid2 raid3 std st0 st1
	R fd
	;;

presto*|xd*|xy*|sd*|raid*|ccd*)
	case $i in
	presto*) dodisk presto $U 26 25 $U 0;;
	xd*) dodisk xd $U 10 42 $U 0;;
	xy*) dodisk xy $U 3 9 $U 0;;
	sd*) dodisk sd $U 7 17 $U 0;;
	raid*) dodisk raid $U 25 123 $U 0;;
	ccd*) dodisk ccd $U 9 23 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
{
echo -n ${RMlist[*]}
echo -n ${mklist[*]}
echo -n ${MKlist[*]}
echo -n ${whlist[*]}
echo ${oplist[*]}
} | if [ "$eo" = "echo" ]; then
        cat
else
	sh
fi
