#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.sparc/MAKEDEV.md,v 1.7 2002/02/09 16:59:50 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.29 2002/02/14 05:38:22 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.6 2002/02/14 05:50:37 todd Exp 
#
#	$OpenBSD: MAKEDEV,v 1.83 2002/02/14 05:55:09 todd Exp $
#
# Copyright (c) 2001 Todd T. Fries <todd@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
# Disks:
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	ch*	SCSI media changer
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
#	xy*	Xylogic 450/451 disks
#	rd*	"ramdisk" pseudo-disks
#	xd*	Xylogic 753/7053 disks
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
# Pseudo terminals:
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
# Printers:
# Terminal ports:
#	tty[a-z]*	Zilog 8530 Serial Port
#	cua[a-z]*	Zilog 8530 Serial Port
# Special purpose devices:
#	audio*	audio device
#	openprom	
#	bwtwo*	
#	cgtwo*	
#	cgthree*	
#	cgfour*	
#	cgsix*	
#	cgeight*	
#	cgfourteen*	
#	tcx*	
#	bpf*	Berkeley Packet Filter
#	pf*	Packet Filter
#	altq/	ALTQ control interface
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	*random	inkernel random data source
#	magma*	magma card (makes 16 tty and 2 bpp)
#	bppmag[mno]	magma parallel port device
#	spif*	spif card (makes 8 tty and 1 bpp)
#	bpp[jkl]	spif parallel port device
#	xfs*	XFS filesystem devices
#	raid*	RAIDframe disk devices
#	fd	makes fd/* for the fdescfs
#	ses*	SES/SAF-TE SCSI devices
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

trunc()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std random
	R fd0 sd0 sd1 rd0
	;;

std)
	M console	c 0 0 600
	M tty		c 2 0
	M mem		c 3 0 640 kmem
	M kmem		c 3 1 640 kmem
	M null		c 3 2
	M zero		c 3 12
	M stdin		c 24 0
	M stdout	c 24 1
	M stderr	c 24 2
	M ksyms		c 122 0 640 kmem
	M drum		c 7 0 640 kmem
	M klog		c 16 0 600
	M eeprom	c 3 11	640 kmem
	M openprom	c 70 0	644
	M fb		c 22 0
	M mouse		c 13 0
	M kbd		c 29 0
	;;

ses*)
	M ses$U c 124 $U 640 operator
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 24 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

spif*)
	case $U in
	0)	offset=0  nam=j;;
	1)	offset=16 nam=k;;
	2)	offset=32 nam=l;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 8 ]
	do
		name=${nam}`hex $n`
		M tty$name c 102 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 103 $(($offset+0)) 600
	;;

magma*)
	case $U in
	0)	offset=0  nam=m;;
	1)	offset=16 nam=n;;
	2)	offset=32 nam=o;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 16 ]
	do
		name=${nam}`hex $n`
		M tty$name c 100 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 101 $(($offset+0)) 600
	M bpp${nam}1 c 101 $(($offset+1)) 600
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 119 $n 644
		n=$(($n+1))
	done
	;;

tun*)
	M tun$U c 111 $U 600
	;;

lkm)
	M lkm c 112 0 640 kmem
	;;

altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c 125 $U 644
		U=$(($U+1))
	done
	;;

pf*)
	M pf c 59 0 600
	;;

bpf*)
	M bpf$U c 105 $U 600
	;;

tcx*)
	M tcx$U c 109 $U
	;;

cgfourteen*)
	M cgfourteen$U c 99 $U
	;;

cgeight*)
	M cgeight$U c 64 $U 666
	;;

cgsix*)
	M cgsix$U c 67 $U 666
	;;

cgfour*)
	M cgfour$U c 39 $U 666
	;;

cgthree*)
	M cgthree$U c 55 $U 666
	;;

cgtwo*)
	M cgtwo$U c 31 $U 666
	;;

bwtwo*)
	M bwtwo$U c 27 $U 666
	;;

openprom)
	M openprom c 70 0  
	;;

audio*)
	M sound$U	c 69 $U
	M mixer$U	c 69 $(($U+16))
	M audio$U	c 69 $(($U+128))
	M audioctl$U	c 69 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

cua[a-z])
	u=${i#cua*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=4 ;;
	d) n=5 ;;
	*) echo unknown cua device $i ;;  
	esac
	M cua$u c 12 $(($n+128)) 660 dialer uucp
	;;

tty[a-z])
	u=${i#tty*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=4 ;;
	d) n=5 ;;
	*) echo unknown tty device $i ;;
	esac
	M tty$u c 12 $n 660 dialer uucp
	;;

pty*)
	case $U in
	0) off=0 name=p;;
	1) off=16 name=q;;
	2) off=32 name=r;;
	3) off=48 name=s;;
	4) off=64 name=t;;
	5) off=80 name=u;;
	6) off=96 name=v;;
	7) off=112 name=w;;
	8) off=128 name=x;;
	9) off=144 name=y;;
	10) off=160 name=z;;
	11) off=176 name=P;;
	12) off=192 name=Q;;
	13) off=206 name=R;;
	14) off=224 name=S;;
	15) off=240 name=T;;
	*) echo bad unit for pty in: $i; continue;;
	esac
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		M tty$nam c 20 $(($off+$n))
		M pty$nam c 21 $(($off+$n))
		n=$(($n+1))
	done
	;;

vnd*)
	dodisk vnd $U 8 110 $U 0
	dodisk svnd $U 8 110 $U 128
	;;

fd*)
	typnam=$U${i#fd[01]*}
	case $typnam in
	0|1)	typnum=0;; # no type specified, assume A
	*A)	typnum=0; typnam=0;;
	*B)	typnum=1;;
	*C)	typnum=2;;
	*D)	typnum=3;;
	*E)	typnum=4;;
	*F)	typnum=5;;
	*G)	typnum=6;;
	*H)	typnum=7;;
	*)	echo bad type $typnam for $i; exit 1;;
	esac
	case $U in
	0|1)	blk=16; chr=54;;
	*)	echo bad unit $U for $i; exit 1;;
	esac
	nam=fd${typnam}
	n=$(($(($U*128))+$(($typnum*16))))
	M ${nam}a	b $blk $n 640 operator
	M ${nam}b	b $blk $(($n+1)) 640 operator
	M ${nam}c	b $blk $(($n+2)) 640 operator
	M r${nam}a	c $chr $n 640 operator
	M r${nam}b	c $chr $(($n+1)) 640 operator
	M r${nam}c	c $chr $(($n+2)) 640 operator
	;;

rd*)
	dodisk2 rd $U 17 106 $U 0
	;;

ss*)
	M ss$U c 121 $U 440 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

uk*)
	M uk$U c 120 $U 640 operator
	;;

ch*)
	M ch$U c 19 $U 660 operator
	;;

cd*)
	dodisk2 cd $U 18 58 $U 0
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 11 $n 660 operator
		M ${pre}rst$U	c 18 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R tcx0 cgfourteen0 cgeight0 cgsix0 cgfour0 cgthree0 cgtwo0
	R bwtwo0 audio0 xfs0 ss0 ss1 uk0 ses0 rndrandom lkm cuaa cuab
	R cuac cuad ttya ttyb ttyc ttyd pf altq tun0 tun1 tun2 tun3
	R bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 fd1 fd1B
	R fd1C fd1D fd1E fd1F fd1G fd1H fd0 fd0B fd0C fd0D fd0E fd0F
	R fd0G fd0H xd0 xd1 xd2 xd3 xy0 xy1 xy2 xy3 rd0 raid0 raid1
	R raid2 raid3 ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 std cd0
	R cd1 ch0 st0 st1 pty0 pty1 pty2 fd sd0 sd1 sd2 sd3 sd4
	;;

xd*|xy*|sd*|raid*|ccd*)
	case $i in
	xd*) dodisk xd $U 10 42 $U 0;;
	xy*) dodisk xy $U 3 9 $U 0;;
	sd*) dodisk sd $U 7 17 $U 0;;
	raid*) dodisk raid $U 25 123 $U 0;;
	ccd*) dodisk ccd $U 9 23 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
