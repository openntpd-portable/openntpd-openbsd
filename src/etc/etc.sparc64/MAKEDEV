#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.sparc64/MAKEDEV.md,v 1.29 2004/02/10 01:31:20 millert Exp 
#	OpenBSD: MAKEDEV.mi,v 1.70 2004/02/13 23:34:13 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.9 2004/01/12 22:18:24 todd Exp 
#
#
# Copyright (c) 2001,2002,2003 Todd T. Fries <todd@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	devices to be put on ramdisk-based media
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
#	ch*	SCSI media changer
# Disks:
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	rd*	"rd" pseudo-disks
#	ccd*	concatenated disk devices
#	raid*	RAIDframe disk devices
# Console ports:
#	ttyC0	wscons screen 0
#	ttyC-F*	wscons virtual consoles
#	wskbd*	wscons keyboards
#	wsmux	wscons keyboard/mouse mux devices
#	console	PROM console
# Pointing devices:
#	mouse	mouse (provides events, for X11)
#	wsmouse*	wscons mice
# Terminal ports:
#	tty[a-z]*	Zilog 8530 Serial Port
#	cua[a-z]*	Zilog 8530 Serial Port
#	tty[0-7][0-9a-f]	NS16x50 serial ports
#	ttyh*	Sab82532 serial devices
# Pseudo terminals:
#	tty*	set of 16 slave pseudo terminals
#	pty*	set of 16 master pseudo terminals
#	ptm	pty master device
# Printers:
#	lpt*	IEEE 1284 centronics printer
#	lpa*	interruptless lp
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ugen*	Generic device
#	ulpt*	Printer devices
#	urio*	Diamond Multimedia Rio 500
#	ttyU*	Serial ports
#	uscanner*	Scanners
# Special purpose devices:
#	usbs	make USB devices
#	ses*	SES/SAF-TE SCSI devices
#	fd	makes fd/* for the fdescfs
#	xfs*	XFS filesystem devices
#	ss*	SCSI scanners
#	uk*	SCSI Unknown device
#	audio*	audio device
#	pf*	Packet Filter
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	lkm	loadable kernel modules interface
#	*random	inkernel random data source
#	magma*	magma card (makes 16 tty and 2 bpp)
#	bppmag[mno]	magma parallel port device
#	bpp*	parallel port devices
#	spif*	spif card (makes 8 tty and 1 bpp)
#	bpp[jkl]	spif parallel port device
#	crypto	hardware crypto access driver
#	pci	PCI bus device
#	uperf	performance counters
#	systrace*	system call tracing device
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

alph2d()
{
	local t="$1"  
	local p="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local sub=${p%${t}*}
	echo ${#sub}
}

h2d()
{
	local s="$1"
	local f=${s%*[0-9a-f]} n=${s#[0-9a-f]*}

	echo $(($(_h2d $f)*16+ $(_h2d $n) ))
}

_h2d()
{
	case $1 in
	[0-9]) echo -n $1;;
	a) echo -n 10;;
	b) echo -n 11;;
	c) echo -n 12;;
	d) echo -n 13;;
	e) echo -n 14;;
	f) echo -n 15;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root:operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7:$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;_lkm)g=61;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std fd0 wd0 wd1 wd2 sd0 sd1 sd2 rd0
	R st0 cd0 bpf0 random
	;;

std)
	M console	c 0 0 600
	M tty		c 2 0
	M mem		c 3 0 640 kmem
	M kmem		c 3 1 640 kmem
	M null		c 3 2
	M zero		c 3 12
	M stdin		c 24 0
	M stdout	c 24 1
	M stderr	c 24 2
	M ksyms		c 76 0 640 kmem
	M drum		c 7 0 640 kmem
	M klog		c 16 0 600
	M mouse		c 13 0 666
	M fb		c 22 0 666
	M openprom	c 70 0 640 kmem
	;;

mouse*)
	name=${i##mouse-}
	if [ ! -c $name ]; then
		$0 $name	# make the appropriate device
	fi
	RMlist="$RMlist mouse"
	MKlist="$MKlist;ln -s $name mouse"
	;;

systrace)
	M systrace c 50 0 644
	;;

uperf)
	M uperf c 25 0 664
	;;

pci)
	M pci c 52 0 600
	;;

crypto)
	M crypto c 75 0
	;;

spif*)
	case $U in
	0)	offset=0  nam=j;;
	1)	offset=16 nam=k;;
	2)	offset=32 nam=l;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 8 ]
	do
		name=${nam}`hex $n`
		M tty$name c 108 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 109 $(($offset+0)) 600
	;;

bpp*)
	M bpp$U c 107 $U 600
	;;

magma*)
	case $U in
	0)	offset=0  nam=m;;
	1)	offset=16 nam=n;;
	2)	offset=32 nam=o;;
	*)	echo "bad unit for $i: $U"; exit 127;;
	esac
	offset=$(($U*64))
	n=0
	while [ $n -lt 16 ]
	do
		name=${nam}`hex $n`
		M tty$name c 71 $(($offset+$n)) 660 dialer uucp
		n=$(($n+1))
	done
	M bpp${nam}0 c 72 $(($offset+0)) 600
	M bpp${nam}1 c 72 $(($offset+1)) 600
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 119 $n 644
		n=$(($n+1))
	done
	;;

lkm)
	M lkm c 112 0 640 _lkm
	;;

tun*)
	M tun$U c 111 $U 600
	;;

bpf*)
	M bpf$U c 105 $U 600
	;;

pf*)
	M pf c 73 0 600
	;;

audio*)
	M sound$U	c 69 $U
	M mixer$U	c 69 $(($U+16))
	M audio$U	c 69 $(($U+128))
	M audioctl$U	c 69 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

uk*)
	M uk$U c 60 $U 640 operator
	;;

ss*)
	M ss$U c 59 $(($U*16)) 640 operator
	M nss$U c 59 $(($(($U*16))+1)) 640 operator
	M enss$U c 59 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 24 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

ses*)
	M ses$U c 4 $U 640 operator
	;;

usbs)
	R ttyU0 ttyU1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R uscanner0 urio0 usb0 usb1
	;;

uscanner*)
	M uscanner$U c 96 $U 660
	;;

ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 95 $o 660 dialer uucp
	;;

urio*)
	M urio$U c 94 $U 660
	;;

ulpt*)
	M ulpt$U c 93 $U 660
	;;

ugen*)
	n=$(($U*16))
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		M ugen$U.$j c 92 $(($n+$j)) 660
	done
	;;

uhid*)
	M uhid$U c 91 $U 660
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 90 $U 660
	;;

lpt*|lpa*)
	case $i in
	lpt*) n=lpt f=0;;
	lpa*) n=lpa f=128;;
	esac
	M $n$U c 37 $(($U+$f)) 600
	;;

ptm)
	M ptm c 123 0 666
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 20 $(($off+$n))
		M pty$nam c 21 $(($off+$n))
		n=$(($n+1))
	done
	;;

ttyh*)
	M ttyh$U c 77 $U 660 dialer uucp
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 36 $o 660 dialer uucp
	M cua$U c 36 $(($o+128)) 660 dialer uucp
	;;

cua[a-z])
	u=${i#cua*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=2 ;;
	d) n=3 ;;
	*) echo unknown cua device $i ;;
	esac
	M cua$u c 12 $(($n+128)) 660 dialer uucp
	;;

tty[a-z])
	u=${i#tty*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=2 ;;
	d) n=3 ;;
	*) echo unknown tty device $i ;;
	esac
	M tty$u c 12 $n 660 dialer uucp
	;;

wsmouse*)
	M wsmouse$U c 80 $U 600
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 81 0 600
	M wskbd c 81 1 600
	;;

wskbd*)
	M wskbd$U c 79 $U 600
	;;

tty[C-F]*)
	U=${i##tty[C-F]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 78 $(( 16#$U + $m )) 600;;
	cfg) M tty${n}cfg c 78 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wskbd0 wskbd1 wskbd2
	R wskbd3 wsmux ttyFcfg ttyF0 ttyF1 ttyF2 ttyF3 ttyF4 ttyF5
	R ttyF6 ttyF7 ttyF8 ttyF9 ttyFa ttyFb ttyEcfg ttyE0 ttyE1
	R ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7 ttyE8 ttyE9 ttyEa ttyEb
	R ttyDcfg ttyD0 ttyD1 ttyD2 ttyD3 ttyD4 ttyD5 ttyD6 ttyD7
	R ttyD8 ttyD9 ttyDa ttyDb ttyCcfg ttyC0 ttyC1 ttyC2 ttyC3
	R ttyC4 ttyC5 ttyC6 ttyC7 ttyC8 ttyC9 ttyCa ttyCb
	;;

rd*)
	dodisk2 rd $U 5 61 $U 0
	;;

vnd*)
	dodisk vnd $U 8 110 $U 0
	dodisk svnd $U 8 110 $U 2048
	;;

cd*)
	dodisk2 cd $U 18 58 $U 0
	;;

fd*)
	typnam=$U${i#fd[01]*}
	case $typnam in
	0|1)	typnum=0;; # no type specified, assume A
	*A)	typnum=0; typnam=0;;
	*B)	typnum=1;;
	*C)	typnum=2;;
	*D)	typnum=3;;
	*E)	typnum=4;;
	*F)	typnum=5;;
	*G)	typnum=6;;
	*H)	typnum=7;;
	*)	echo bad type $typnam for $i; exit 1;;
	esac
	case $U in
	0|1)	blk=16; chr=54;;
	*)	echo bad unit $U for $i; exit 1;;
	esac
	nam=fd${typnam}
	n=$(($(($U*128))+$(($typnum*16))))
	M ${nam}a	b $blk $n 640 operator
	M ${nam}b	b $blk $(($n+1)) 640 operator
	M ${nam}c	b $blk $(($n+2)) 640 operator
	M r${nam}a	c $chr $n 640 operator
	M r${nam}b	c $chr $(($n+1)) 640 operator
	M r${nam}c	c $chr $(($n+2)) 640 operator
	;;

ch*)
	M ch$U c 19 $U 660 operator
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 11 $n 660 operator
		M ${pre}rst$U	c 18 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R cuaa cuab cuac cuad ttya ttyb ttyc ttyd bpp0 vnd0 vnd1 vnd2
	R vnd3 sd0 sd1 sd2 sd3 sd4 cd0 cd1 rd0 tun0 tun1 tun2 tun3
	R bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1
	R pty2 fd1 fd1B fd1C fd1D fd1E fd1F fd1G fd1H fd0 fd0B fd0C
	R fd0D fd0E fd0F fd0G fd0H xfs0 ss0 ss1 ch0 ses0 ccd0 ccd1
	R ccd2 ccd3 ptm wscons pci usbs audio0 uk0 random lpa0 lpa1
	R lpa2 lpt0 lpt1 lpt2 lkm tty00 tty01 tty02 tty03 ttyh0 ttyh1
	R crypto pf systrace wd0 wd1 wd2 wd3 raid0 raid1 raid2 raid3
	R std st0 st1 fd
	;;

wd*|sd*|raid*|ccd*)
	case $i in
	wd*) dodisk wd $U 12 26 $U 0;;
	sd*) dodisk sd $U 7 17 $U 0;;
	raid*) dodisk raid $U 25 121 $U 0;;
	ccd*) dodisk ccd $U 9 23 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
